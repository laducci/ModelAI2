// ==============================================
// SISTEMA DE GERENCIAMENTO DE USU√ÅRIOS - VERS√ÉO FINAL
// ==============================================

console.log('üöÄ Carregando sistema de usu√°rios...');

// Vari√°veis globais
let usuarios = [];
let usuarioEditando = null;

// Fun√ß√µes de alerta fallback se n√£o estiverem carregadas
if (typeof showSuccess === 'undefined') {
    window.showSuccess = (msg) => {
        console.log('‚úÖ SUCCESS:', msg);
        alert('‚úÖ ' + msg);
    };
}

if (typeof showError === 'undefined') {
    window.showError = (msg) => {
        console.error('‚ùå ERROR:', msg);
        alert('‚ùå ' + msg);
    };
}

if (typeof showInfo === 'undefined') {
    window.showInfo = (msg) => {
        console.log('‚ÑπÔ∏è INFO:', msg);
        alert('‚ÑπÔ∏è ' + msg);
    };
}

// ==============================================
// INICIALIZA√á√ÉO
// ==============================================

document.addEventListener('DOMContentLoaded', async function() {
    console.log('üåü DOM carregado - Inicializando sistema de usu√°rios...');
    
    try {
        // Verificar autentica√ß√£o
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('‚ùå Token n√£o encontrado');
            showError('Voc√™ precisa fazer login primeiro!');
            setTimeout(() => {
                window.location.href = '/login.html';
            }, 2000);
            return;
        }
        
        console.log('üîë Token encontrado:', token.substring(0, 20) + '...');
        
        // Configurar eventos
        await configurarEventos();
        
        // Carregar usu√°rios
        await carregarUsuarios();
        
        console.log('üéâ Sistema inicializado com sucesso!');
        
    } catch (error) {
        console.error('üí• Erro na inicializa√ß√£o:', error);
        showError('Erro ao inicializar o sistema: ' + error.message);
    }
});

// ==============================================
// CONFIGURA√á√ÉO DE EVENTOS
// ==============================================

async function configurarEventos() {
    console.log('‚öôÔ∏è Configurando eventos...');
    
    // Bot√£o Novo Usu√°rio
    const btnNovoUsuario = document.getElementById('btnNovoUsuario');
    if (btnNovoUsuario) {
        btnNovoUsuario.addEventListener('click', abrirModalNovoUsuario);
        console.log('‚úÖ Evento bot√£o novo usu√°rio configurado');
    } else {
        console.error('‚ùå Bot√£o btnNovoUsuario n√£o encontrado');
    }
    
    // Form Novo Usu√°rio
    const formNovoUsuario = document.getElementById('formNovoUsuario');
    if (formNovoUsuario) {
        formNovoUsuario.addEventListener('submit', criarUsuario);
        console.log('‚úÖ Evento form novo usu√°rio configurado');
    } else {
        console.error('‚ùå Form formNovoUsuario n√£o encontrado');
    }
    
    // Form Editar Usu√°rio
    const formEditarUsuario = document.getElementById('formEditarUsuario');
    if (formEditarUsuario) {
        formEditarUsuario.addEventListener('submit', salvarEdicaoUsuario);
        console.log('‚úÖ Evento form editar usu√°rio configurado');
    } else {
        console.error('‚ùå Form formEditarUsuario n√£o encontrado');
    }
    
    // Fechar modais ao clicar fora
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal-overlay')) {
            fecharModais();
        }
    });
    
    console.log('‚úÖ Todos os eventos configurados');
}

// ==============================================
// CARREGAR USU√ÅRIOS
// ==============================================

async function carregarUsuarios() {
    console.log('üìã Carregando usu√°rios da API...');
    
    try {
        const token = localStorage.getItem('token');
        
        console.log('üåê Fazendo requisi√ß√£o para /api/users...');
        const response = await fetch('/api/users', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üì° Status da resposta:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erro na resposta:', errorText);
            throw new Error(`Erro ${response.status}: ${errorText}`);
        }
        
        const data = await response.json();
        console.log('üìã Dados recebidos:', data);
        
        if (!data.success) {
            throw new Error(data.message || 'Erro ao carregar usu√°rios');
        }
        
        usuarios = data.users || [];
        console.log(`üë• ${usuarios.length} usu√°rios encontrados`);
        
        // Renderizar usu√°rios
        renderizarUsuarios();
        atualizarEstatisticas();
        
        showSuccess(`${usuarios.length} usu√°rios carregados com sucesso!`);
        
    } catch (error) {
        console.error('üí• Erro ao carregar usu√°rios:', error);
        showError('Erro ao carregar usu√°rios: ' + error.message);
        
        // Renderizar tabela vazia
        usuarios = [];
        renderizarUsuarios();
        atualizarEstatisticas();
    }
}

// ==============================================
// RENDERIZAR USU√ÅRIOS
// ==============================================

function renderizarUsuarios() {
    console.log('üé® Renderizando usu√°rios na tabela...');
    
    const tbody = document.getElementById('tabelaUsuarios');
    if (!tbody) {
        console.error('‚ùå Tabela de usu√°rios n√£o encontrada!');
        return;
    }
    
    if (usuarios.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center text-gray-500 p-8">
                    <i class="fas fa-users text-4xl mb-4"></i>
                    <p>Nenhum usu√°rio encontrado</p>
                    <button onclick="location.reload()" class="mt-2 px-4 py-2 bg-teal-600 text-white rounded hover:bg-teal-700">
                        üîÑ Recarregar
                    </button>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = usuarios.map(usuario => {
        const status = usuario.active !== false ? 
            '<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">‚úÖ Ativo</span>' : 
            '<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">‚ùå Inativo</span>';
            
        const role = usuario.role === 'admin' ? 
            '<span class="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">üëë Admin</span>' :
            '<span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">üë§ Usu√°rio</span>';
            
        const ultimoLogin = usuario.lastLogin ? 
            new Date(usuario.lastLogin).toLocaleDateString('pt-BR') : 
            'Nunca';
            
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-teal-100 rounded-full flex items-center justify-center mr-3">
                            <span class="text-teal-600 font-semibold">
                                ${usuario.name.charAt(0).toUpperCase()}
                            </span>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">${usuario.name}</div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">${usuario.email}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${usuario.company || '-'}</td>
                <td class="px-6 py-4">${role}</td>
                <td class="px-6 py-4">${status}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${ultimoLogin}</td>
                <td class="px-6 py-4 text-sm font-medium">
                    <div class="flex space-x-2">
                        <button onclick="editarUsuario('${usuario._id}')" class="text-blue-600 hover:text-blue-900 px-2 py-1 rounded border border-blue-200 hover:bg-blue-50">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button onclick="toggleUsuario('${usuario._id}')" class="text-yellow-600 hover:text-yellow-900 px-2 py-1 rounded border border-yellow-200 hover:bg-yellow-50">
                            <i class="fas fa-toggle-${usuario.active !== false ? 'on' : 'off'}"></i> ${usuario.active !== false ? 'Desativar' : 'Ativar'}
                        </button>
                        <button onclick="deletarUsuario('${usuario._id}')" class="text-red-600 hover:text-red-900 px-2 py-1 rounded border border-red-200 hover:bg-red-50">
                            <i class="fas fa-trash"></i> Excluir
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    console.log(`‚úÖ ${usuarios.length} usu√°rios renderizados na tabela`);
}

// ==============================================
// ATUALIZAR ESTAT√çSTICAS
// ==============================================

function atualizarEstatisticas() {
    const totalElement = document.getElementById('totalUsuarios');
    const ativosElement = document.getElementById('usuariosAtivos');
    const adminsElement = document.getElementById('usuariosAdmins');
    
    const total = usuarios.length;
    const ativos = usuarios.filter(u => u.active !== false).length;
    const admins = usuarios.filter(u => u.role === 'admin').length;
    
    if (totalElement) totalElement.textContent = total;
    if (ativosElement) ativosElement.textContent = ativos;
    if (adminsElement) adminsElement.textContent = admins;
    
    console.log(`üìä Estat√≠sticas: ${total} total, ${ativos} ativos, ${admins} admins`);
}

// ==============================================
// MODAL NOVO USU√ÅRIO
// ==============================================

function abrirModalNovoUsuario() {
    console.log('‚ûï Abrindo modal novo usu√°rio...');
    
    const modal = document.getElementById('modalNovoUsuario');
    if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        // Limpar formul√°rio
        const form = document.getElementById('formNovoUsuario');
        if (form) {
            form.reset();
        }
        
        console.log('‚úÖ Modal novo usu√°rio aberto');
    } else {
        console.error('‚ùå Modal novo usu√°rio n√£o encontrado');
        showError('Erro: Modal n√£o encontrado');
    }
}

function fecharModalNovoUsuario() {
    console.log('‚ùå Fechando modal novo usu√°rio...');
    
    const modal = document.getElementById('modalNovoUsuario');
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        console.log('‚úÖ Modal novo usu√°rio fechado');
    }
}

// ==============================================
// CRIAR USU√ÅRIO
// ==============================================

async function criarUsuario(event) {
    console.log('üìù Criando novo usu√°rio...');
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const dadosUsuario = {
        name: formData.get('name'),
        email: formData.get('email'),
        password: formData.get('password'),
        company: formData.get('company') || '',
        role: formData.get('role') || 'user'
    };
    
    console.log('üìä Dados do usu√°rio:', dadosUsuario);
    
    // Valida√ß√£o
    if (!dadosUsuario.name || !dadosUsuario.email || !dadosUsuario.password) {
        showError('Por favor, preencha todos os campos obrigat√≥rios');
        return;
    }
    
    try {
        console.log('üì° Enviando para API...');
        
        const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(dadosUsuario)
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Usu√°rio criado:', data);
            
            showSuccess('Usu√°rio criado com sucesso!');
            fecharModalNovoUsuario();
            
            // Recarregar lista de usu√°rios
            await carregarUsuarios();
            
        } else {
            const erro = await response.text();
            console.error('‚ùå Erro da API:', erro);
            showError('Erro ao criar usu√°rio: ' + erro);
        }
        
    } catch (error) {
        console.error('üí• Erro ao criar usu√°rio:', error);
        showError('Erro de conex√£o ao criar usu√°rio');
    }
}

// ==============================================
// EDITAR USU√ÅRIO
// ==============================================

function editarUsuario(id) {
    console.log('üìù Editando usu√°rio:', id);
    
    const usuario = usuarios.find(u => u._id === id);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado');
        return;
    }
    
    console.log('üë§ Dados do usu√°rio para edi√ß√£o:', usuario);
    
    // Armazenar usu√°rio sendo editado
    usuarioEditando = usuario;
    
    // Preencher formul√°rio
    document.getElementById('editName').value = usuario.name || '';
    document.getElementById('editEmail').value = usuario.email || '';
    document.getElementById('editCompany').value = usuario.company || '';
    document.getElementById('editRole').value = usuario.role || 'user';
    document.getElementById('editActive').checked = usuario.active !== false;
    
    // Abrir modal
    const modal = document.getElementById('modalEditarUsuario');
    if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        console.log('‚úÖ Modal editar usu√°rio aberto');
    } else {
        console.error('‚ùå Modal editar usu√°rio n√£o encontrado');
        showError('Erro: Modal de edi√ß√£o n√£o encontrado');
    }
}

function fecharModalEditarUsuario() {
    console.log('‚ùå Fechando modal editar usu√°rio...');
    
    const modal = document.getElementById('modalEditarUsuario');
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        usuarioEditando = null;
        console.log('‚úÖ Modal editar usu√°rio fechado');
    }
}

async function salvarEdicaoUsuario(event) {
    console.log('üíæ Salvando edi√ß√£o do usu√°rio...');
    event.preventDefault();
    
    if (!usuarioEditando) {
        showError('Nenhum usu√°rio sendo editado');
        return;
    }
    
    const form = event.target;
    const formData = new FormData(form);
    
    const dadosAtualizados = {
        name: formData.get('name'),
        email: formData.get('email'),
        company: formData.get('company') || '',
        role: formData.get('role') || 'user',
        active: formData.get('active') === 'on'
    };
    
    // Incluir senha se fornecida
    const novaSenha = formData.get('password');
    if (novaSenha && novaSenha.trim()) {
        dadosAtualizados.password = novaSenha;
    }
    
    console.log('üìä Dados atualizados:', dadosAtualizados);
    
    try {
        console.log('üì° Enviando atualiza√ß√£o para API...');
        
        const response = await fetch(`/api/users/${usuarioEditando._id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(dadosAtualizados)
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Usu√°rio atualizado:', data);
            
            showSuccess('Usu√°rio atualizado com sucesso!');
            fecharModalEditarUsuario();
            
            // Recarregar lista de usu√°rios
            await carregarUsuarios();
            
        } else {
            const erro = await response.text();
            console.error('‚ùå Erro da API:', erro);
            showError('Erro ao atualizar usu√°rio: ' + erro);
        }
        
    } catch (error) {
        console.error('üí• Erro ao atualizar usu√°rio:', error);
        showError('Erro de conex√£o ao atualizar usu√°rio');
    }
}

// ==============================================
// TOGGLE USU√ÅRIO (ATIVAR/DESATIVAR)
// ==============================================

async function toggleUsuario(id) {
    console.log('üîÑ Alternando status do usu√°rio:', id);
    
    const usuario = usuarios.find(u => u._id === id);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado');
        return;
    }
    
    const novoStatus = !usuario.active;
    const acao = novoStatus ? 'ativar' : 'desativar';
    
    if (!confirm(`Tem certeza que deseja ${acao} o usu√°rio ${usuario.name}?`)) {
        return;
    }
    
    try {
        console.log(`üì° ${acao} usu√°rio na API...`);
        
        const response = await fetch(`/api/users/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ active: novoStatus })
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            console.log(`‚úÖ Usu√°rio ${acao} com sucesso`);
            showSuccess(`Usu√°rio ${acao} com sucesso!`);
            
            // Recarregar lista de usu√°rios
            await carregarUsuarios();
            
        } else {
            const erro = await response.text();
            console.error('‚ùå Erro da API:', erro);
            showError(`Erro ao ${acao} usu√°rio: ` + erro);
        }
        
    } catch (error) {
        console.error(`üí• Erro ao ${acao} usu√°rio:`, error);
        showError(`Erro de conex√£o ao ${acao} usu√°rio`);
    }
}

// ==============================================
// DELETAR USU√ÅRIO
// ==============================================

async function deletarUsuario(id) {
    console.log('üóëÔ∏è Deletando usu√°rio:', id);
    
    const usuario = usuarios.find(u => u._id === id);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado');
        return;
    }
    
    if (!confirm(`Tem certeza que deseja EXCLUIR permanentemente o usu√°rio ${usuario.name}?\n\nEsta a√ß√£o N√ÉO pode ser desfeita!`)) {
        return;
    }
    
    try {
        console.log('üì° Deletando usu√°rio na API...');
        
        const response = await fetch(`/api/users/${id}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            console.log('‚úÖ Usu√°rio deletado com sucesso');
            showSuccess('Usu√°rio exclu√≠do com sucesso!');
            
            // Recarregar lista de usu√°rios
            await carregarUsuarios();
            
        } else {
            const erro = await response.text();
            console.error('‚ùå Erro da API:', erro);
            showError('Erro ao excluir usu√°rio: ' + erro);
        }
        
    } catch (error) {
        console.error('üí• Erro ao deletar usu√°rio:', error);
        showError('Erro de conex√£o ao excluir usu√°rio');
    }
}

// ==============================================
// FUN√á√ïES AUXILIARES
// ==============================================

function fecharModais() {
    fecharModalNovoUsuario();
    fecharModalEditarUsuario();
}

// Expor fun√ß√µes globalmente para os bot√µes inline
window.abrirModalNovoUsuario = abrirModalNovoUsuario;
window.fecharModalNovoUsuario = fecharModalNovoUsuario;
window.criarUsuario = criarUsuario;
window.editarUsuario = editarUsuario;
window.fecharModalEditarUsuario = fecharModalEditarUsuario;
window.salvarEdicaoUsuario = salvarEdicaoUsuario;
window.toggleUsuario = toggleUsuario;
window.deletarUsuario = deletarUsuario;
window.carregarUsuarios = carregarUsuarios;

console.log('‚úÖ Sistema de usu√°rios carregado completamente!');
