// USUARIOS.JS - SISTEMA REAL DE PRODU√á√ÉO
console.log('üëë USUARIOS - Sistema Real Iniciando...');

let allUsers = [];
let currentUser = null;

// DEFINIR FUN√á√ïES GLOBAIS IMEDIATAMENTE
window.abrirModalNovoUsuario = function() {
    console.log('üîÑ Tentando abrir modal...');
    
    const modal = document.getElementById('modalNovoUsuario');
    const form = document.getElementById('formNovoUsuario');
    
    if (!modal) {
        console.error('‚ùå Modal n√£o encontrado!');
        alert('Erro: Modal n√£o encontrado no DOM');
        return;
    }
    
    if (!form) {
        console.error('‚ùå Form n√£o encontrado!');
        alert('Erro: Formul√°rio n√£o encontrado no DOM');
        return;
    }
    
    console.log('‚úÖ Modal e form encontrados, abrindo...');
    modal.classList.remove('hidden');
    form.reset();
    console.log('‚úÖ Modal aberto com sucesso!');
};

window.fecharModalNovoUsuario = function() {
    const modal = document.getElementById('modalNovoUsuario');
    const form = document.getElementById('formNovoUsuario');
    
    if (modal) modal.classList.add('hidden');
    if (form) {
        form.reset();
        form.removeAttribute('data-editing');
        const title = document.querySelector('#modalNovoUsuario h3');
        if (title) title.textContent = 'Criar Novo Usu√°rio';
        const senhaField = document.getElementById('novaSenha');
        if (senhaField) senhaField.setAttribute('required', '');
    }
    console.log('‚úÖ Modal fechado');
};

// Fun√ß√£o de logout global
window.logout = function() {
    console.log('üö™ Logout...');
    localStorage.clear();
    sessionStorage.clear();
    window.location.replace('login.html');
};

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìã DOM carregado - iniciando usuarios...');
    
    try {
        // Verificar autentica√ß√£o
        const userData = localStorage.getItem('user') || localStorage.getItem('modelai_user');
        const token = localStorage.getItem('token') || localStorage.getItem('modelai_token');
        
        console.log('üîç Verificando autentica√ß√£o...');
        console.log('üë§ userData:', userData ? 'Existe' : 'N√£o existe');
        console.log('üîë token:', token ? 'Existe' : 'N√£o existe');
        
        if (!userData || !token) {
            console.log('‚ùå N√£o autenticado');
            window.location.replace('login.html');
            return;
        }

        currentUser = JSON.parse(userData);
        console.log('üë§ Usu√°rio atual:', currentUser.name, 'Role:', currentUser.role);

        if (currentUser.role !== 'admin') {
            console.log('üö´ N√£o √© admin');
            showError('Acesso negado. Apenas administradores.');
            setTimeout(() => window.location.replace('inputs.html'), 2000);
            return;
        }

        console.log('‚úÖ Admin verificado - carregando...');
        
        console.log('üìä Carregando usu√°rios...');
        await window.carregarUsuarios();
        
        console.log('üìà Carregando dashboard...');
        await carregarDashboard();
        
        console.log('üéõÔ∏è Configurando event listeners...');
        setupEventListeners();
        
        console.log('üéâ Inicializa√ß√£o completa!');
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        showError('Erro ao inicializar a p√°gina: ' + error.message);
    }
});

// API Real para Usu√°rios
class UserAPI {
    constructor() {
        this.baseURL = window.location.hostname === 'localhost' ? 
            'http://localhost:3000/api' : 
            '/api'; // URL relativa para Vercel
        this.token = localStorage.getItem('token') || localStorage.getItem('modelai_token');
        console.log('üîó UserAPI Base URL:', this.baseURL);
    }

    async request(endpoint, options = {}) {
        try {
            const url = `${this.baseURL}${endpoint}`;
            const config = {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`,
                    ...options.headers
                },
                ...options
            };

            console.log(`üîó ${options.method || 'GET'}: ${url}`);
            const response = await fetch(url, config);
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || `Erro ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('‚ùå Erro na API:', error);
            throw error;
        }
    }

    async getUsers() {
        return this.request('/users');
    }

    async createUser(userData) {
        return this.request('/auth/register', {
            method: 'POST',
            body: JSON.stringify(userData)
        });
    }

    async updateUser(userId, userData) {
        return this.request(`/users/${userId}`, {
            method: 'PUT',
            body: JSON.stringify(userData)
        });
    }

    async updateUserStatus(userId, isActive) {
        return this.request(`/users/${userId}/status`, {
            method: 'PUT',
            body: JSON.stringify({ isActive })
        });
    }

    async deleteUser(userId) {
        return this.request(`/users/${userId}`, {
            method: 'DELETE'
        });
    }
}

const userAPI = new UserAPI();

// Carregar usu√°rios
window.carregarUsuarios = async function() {
    console.log('üìä Carregando usu√°rios...');
    console.log('üîó userAPI dispon√≠vel:', !!userAPI);
    
    showLoading(true);
    
    try {
        console.log('üîÑ Fazendo chamada para userAPI.getUsers()...');
        const response = await userAPI.getUsers();
        console.log('üì• Resposta recebida:', response);
        
        allUsers = response.users || [];
        
        console.log('‚úÖ Usu√°rios carregados:', allUsers.length);
        console.log('üë• Lista de usu√°rios:', allUsers);
        
        console.log('üé® Renderizando usu√°rios...');
        renderUsuarios(allUsers);
        
        console.log('üìä Atualizando estat√≠sticas...');
        updateStats();
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar usu√°rios:', error);
        console.error('‚ùå Stack trace:', error.stack);
        showError('Erro ao carregar usu√°rios: ' + error.message);
    } finally {
        console.log('üèÅ Finalizando carregamento...');
        showLoading(false);
    }
}

// Renderizar usu√°rios na tabela
function renderUsuarios(usuarios) {
    const tbody = document.getElementById('tabelaUsuarios');
    if (!tbody) return;

    if (usuarios.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center py-8 text-gray-500">
                    Nenhum usu√°rio encontrado
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = usuarios.map(user => `
        <tr class="hover:bg-gray-50 transition-colors">
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-teal-100 flex items-center justify-center">
                            <i class="fas ${user.role === 'admin' ? 'fa-crown text-yellow-600' : 'fa-user text-teal-600'}"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">${user.name}</div>
                        <div class="text-sm text-gray-500">${user.email}</div>
                    </div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="text-sm text-gray-900">${user.company || 'N√£o informado'}</span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    user.role === 'admin' 
                        ? 'bg-purple-100 text-purple-800' 
                        : 'bg-blue-100 text-blue-800'
                }">
                    ${user.role === 'admin' ? 'Administrador' : 'Usu√°rio'}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    user.isActive !== false
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                }">
                    ${user.isActive !== false ? 'Ativo' : 'Inativo'}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('pt-BR') : 'Nunca'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                    <button onclick="editUser('${user._id}')" 
                            class="text-blue-600 hover:text-blue-900 transition-colors" 
                            title="Editar">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="toggleUserStatus('${user._id}', ${user.isActive !== false})" 
                            class="text-${user.isActive !== false ? 'red' : 'green'}-600 hover:text-${user.isActive !== false ? 'red' : 'green'}-900 transition-colors" 
                            title="${user.isActive !== false ? 'Desativar' : 'Ativar'}">
                        <i class="fas fa-${user.isActive !== false ? 'user-slash' : 'user-check'}"></i>
                    </button>
                    ${user.role !== 'admin' || user.email !== 'administrador@modelai.com' ? `
                        <button onclick="deleteUser('${user._id}', '${user.name}')" 
                                class="text-red-600 hover:text-red-900 transition-colors" 
                                title="Excluir">
                            <i class="fas fa-trash"></i>
                        </button>
                    ` : ''}
                </div>
            </td>
        </tr>
    `).join('');
}

// Carregar dashboard
async function carregarDashboard() {
    const totalUsers = allUsers.length;
    const activeUsers = allUsers.filter(u => u.isActive !== false).length;
    const adminUsers = allUsers.filter(u => u.role === 'admin').length;
    const recentUsers = allUsers.filter(u => {
        const created = new Date(u.createdAt);
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        return created > oneWeekAgo;
    }).length;

    // Atualizar cards
    const elements = {
        totalUsuarios: document.getElementById('totalUsuarios'),
        usuariosAtivos: document.getElementById('usuariosAtivos'),
        administradores: document.getElementById('administradores'),
        novosUsuarios: document.getElementById('novosUsuarios')
    };

    if (elements.totalUsuarios) elements.totalUsuarios.textContent = totalUsers;
    if (elements.usuariosAtivos) elements.usuariosAtivos.textContent = activeUsers;
    if (elements.administradores) elements.administradores.textContent = adminUsers;
    if (elements.novosUsuarios) elements.novosUsuarios.textContent = recentUsers;

    console.log('üìä Dashboard atualizado:', {totalUsers, activeUsers, adminUsers, recentUsers});
}

// Event listeners
function setupEventListeners() {
    console.log('üéõÔ∏è Configurando event listeners...');
    
    // Modal novo usu√°rio
    const btnNovoUsuario = document.getElementById('btnNovoUsuario');
    if (btnNovoUsuario) {
        btnNovoUsuario.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîµ Bot√£o Novo Usu√°rio clicado!');
            window.abrirModalNovoUsuario();
        });
        console.log('‚úÖ Event listener do bot√£o configurado!');
    } else {
        console.error('‚ùå Bot√£o btnNovoUsuario n√£o encontrado!');
    }

    // Fechar modal
    const btnFecharModal = document.getElementById('fecharModal');
    if (btnFecharModal) {
        btnFecharModal.addEventListener('click', window.fecharModalNovoUsuario);
    }

    // Form novo usu√°rio
    const formNovoUsuario = document.getElementById('formNovoUsuario');
    if (formNovoUsuario) {
        formNovoUsuario.addEventListener('submit', window.criarUsuario);
        console.log('‚úÖ Event listener do form configurado!');
    } else {
        console.error('‚ùå Form n√£o encontrado!');
    }

    // Pesquisa
    const searchInput = document.getElementById('searchUsers');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(filtrarUsuarios, 300);
        });
    }

    // Filtro status
    const filterStatus = document.getElementById('filterStatus');
    if (filterStatus) {
        filterStatus.addEventListener('change', filtrarUsuarios);
    }
}

// Modal functions
function abrirModalNovoUsuario() {
    console.log('üîÑ Tentando abrir modal...');
    
    const modal = document.getElementById('modalNovoUsuario');
    const form = document.getElementById('formNovoUsuario');
    
    if (!modal) {
        console.error('‚ùå Modal n√£o encontrado!');
        alert('Erro: Modal n√£o encontrado no DOM');
        return;
    }
    
    if (!form) {
        console.error('‚ùå Form n√£o encontrado!');
        alert('Erro: Formul√°rio n√£o encontrado no DOM');
        return;
    }
    
    console.log('‚úÖ Modal e form encontrados, abrindo...');
    modal.classList.remove('hidden');
    form.reset();
    console.log('‚úÖ Modal aberto com sucesso!');
}

function fecharModalNovoUsuario() {
    const modal = document.getElementById('modalNovoUsuario');
    const form = document.getElementById('formNovoUsuario');
    
    modal.classList.add('hidden');
    form.reset();
    
    // Resetar estado de edi√ß√£o
    form.removeAttribute('data-editing');
    document.querySelector('#modalNovoUsuario h3').textContent = 'Criar Novo Usu√°rio';
    document.getElementById('novaSenha').setAttribute('required', '');
}

// Criar ou editar usu√°rio
window.criarUsuario = async function(e) {
    console.log('üöÄ Fun√ß√£o criarUsuario chamada!');
    e.preventDefault();
    
    const form = e.target;
    console.log('üìù Form:', form);
    
    const editingId = form.getAttribute('data-editing');
    const isEditing = !!editingId;

    console.log('üìã Coletando dados do formul√°rio...');
    const formData = new FormData(form);
    const userData = {
        name: formData.get('name'),
        email: formData.get('email'),
        company: formData.get('company'),
        role: formData.get('role') || 'user'
    };

    console.log('üìä Dados coletados:', userData);

    // S√≥ incluir senha se n√£o estiver editando ou se foi preenchida
    const password = formData.get('password');
    if (!isEditing && !password) {
        console.error('‚ùå Senha obrigat√≥ria para novos usu√°rios');
        showError('Senha √© obrigat√≥ria para novos usu√°rios');
        return;
    }
    if (password) {
        userData.password = password;
        console.log('üîë Senha adicionada aos dados');
    }

    console.log(isEditing ? '‚úèÔ∏è Editando usu√°rio:' : 'üë§ Criando usu√°rio:', userData.email);

    try {
        console.log('‚è≥ Mostrando loading...');
        showLoading(true);
        
        if (isEditing) {
            console.log('üìù Chamando updateUser...');
            await userAPI.updateUser(editingId, userData);
            showSuccess('Usu√°rio atualizado com sucesso!');
        } else {
            console.log('‚ûï Chamando createUser...');
            console.log('üîó userAPI:', userAPI);
            await userAPI.createUser(userData);
            showSuccess('Usu√°rio criado com sucesso!');
        }
        
        console.log('‚úÖ Opera√ß√£o bem-sucedida, fechando modal...');
        fecharModalNovoUsuario();
        
        console.log('üîÑ Recarregando lista de usu√°rios...');
        await carregarUsuarios();
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar usu√°rio:', error);
        showError('Erro ao salvar usu√°rio: ' + error.message);
    } finally {
        console.log('üèÅ Escondendo loading...');
        showLoading(false);
    }
}

// Editar usu√°rio
async function editUser(userId) {
    try {
        const user = allUsers.find(u => u._id === userId);
        if (!user) {
            showError('Usu√°rio n√£o encontrado');
            return;
        }

        // Preencher modal com dados existentes
        document.getElementById('novoNome').value = user.name;
        document.getElementById('novoEmail').value = user.email;
        document.getElementById('novaEmpresa').value = user.company || '';
        document.getElementById('novoRole').value = user.role;
        document.getElementById('novaSenha').value = '';
        document.getElementById('novaSenha').removeAttribute('required');

        // Mudar t√≠tulo do modal
        document.querySelector('#modalNovoUsuario h3').textContent = 'Editar Usu√°rio';
        
        // Alterar comportamento do form
        const form = document.getElementById('formNovoUsuario');
        form.setAttribute('data-editing', userId);
        
        abrirModalNovoUsuario();

    } catch (error) {
        console.error('‚ùå Erro ao editar usu√°rio:', error);
        showError('Erro ao carregar dados do usu√°rio');
    }
}

// Toggle status do usu√°rio
async function toggleUserStatus(userId, currentStatus) {
    const newStatus = !currentStatus;
    const action = newStatus ? 'ativar' : 'desativar';
    
    const confirmed = await confirmDialog(
        `Tem certeza que deseja ${action} este usu√°rio?`,
        `Confirmar ${action.charAt(0).toUpperCase() + action.slice(1)}`
    );
    
    if (!confirmed) return;

    try {
        showLoading(true);
        await userAPI.updateUserStatus(userId, newStatus);
        
        showSuccess(`Usu√°rio ${newStatus ? 'ativado' : 'desativado'} com sucesso!`);
        await carregarUsuarios();
        
    } catch (error) {
        console.error('‚ùå Erro ao alterar status:', error);
        showError('Erro ao alterar status: ' + error.message);
    } finally {
        showLoading(false);
    }
}

// Excluir usu√°rio
async function deleteUser(userId, userName) {
    const confirmed = await confirmDialog(
        `Tem certeza que deseja excluir o usu√°rio "${userName}"?\n\nEsta a√ß√£o n√£o pode ser desfeita.`,
        'Confirmar Exclus√£o'
    );
    
    if (!confirmed) return;

    try {
        showLoading(true);
        await userAPI.deleteUser(userId);
        
        showSuccess('Usu√°rio exclu√≠do com sucesso!');
        await carregarUsuarios();
        
    } catch (error) {
        console.error('‚ùå Erro ao excluir usu√°rio:', error);
        showError('Erro ao excluir usu√°rio: ' + error.message);
    } finally {
        showLoading(false);
    }
}

// Filtrar usu√°rios
function filtrarUsuarios() {
    const search = document.getElementById('searchUsers').value.toLowerCase();
    const status = document.getElementById('filterStatus').value;
    
    let filtered = allUsers;
    
    if (search) {
        filtered = filtered.filter(user => 
            user.name.toLowerCase().includes(search) ||
            user.email.toLowerCase().includes(search) ||
            (user.company && user.company.toLowerCase().includes(search))
        );
    }
    
    if (status) {
        filtered = filtered.filter(user => {
            if (status === 'active') return user.isActive !== false;
            if (status === 'inactive') return user.isActive === false;
            if (status === 'admin') return user.role === 'admin';
            if (status === 'user') return user.role === 'user';
            return true;
        });
    }
    
    renderUsuarios(filtered);
    console.log('üîç Filtro aplicado:', filtered.length, 'usu√°rios');
}

// Atualizar estat√≠sticas
function updateStats() {
    const total = allUsers.length;
    const active = allUsers.filter(u => u.isActive !== false).length;
    
    document.getElementById('userCount').textContent = total;
    document.getElementById('activeCount').textContent = active;
}

// UTILIT√ÅRIOS DE UI
function showSuccess(message) {
    console.log('‚úÖ', message);
    alert('‚úÖ ' + message);
}

function showError(message) {
    console.error('‚ùå', message);
    alert('‚ùå ' + message);
}

function showLoading(show) {
    const loader = document.getElementById('loading');
    if (loader) {
        loader.style.display = show ? 'flex' : 'none';
    }
}

function confirmDialog(message, title = 'Confirmar') {
    return new Promise(resolve => {
        const confirmed = confirm(`${title}\n\n${message}`);
        resolve(confirmed);
    });
}

// Exportar para uso global
window.carregarUsuarios = carregarUsuarios;
window.criarUsuario = criarUsuario;
window.editUser = editUser;
window.toggleUserStatus = toggleUserStatus;
window.deleteUser = deleteUser;
window.abrirModalNovoUsuario = abrirModalNovoUsuario;
window.fecharModalNovoUsuario = fecharModalNovoUsuario;

console.log('üëë USUARIOS.JS - Sistema Real Configurado!');
