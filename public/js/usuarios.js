// USUARIOS.JS - VERS√ÉO COMPLETA E FUNCIONAL
console.log('üöÄ USUARIOS.JS - Iniciando vers√£o completa...');

// Vari√°veis globais
let usuarios = [];
let usuarioAtual = null;

//===============================
// FUN√á√ïES DE MODAL
//===============================

// Fun√ß√£o para abrir modal novo usu√°rio
window.abrirModalNovoUsuario = function() {
    console.log('üîµ abrirModalNovoUsuario chamada!');
    
    const modal = document.getElementById('modalNovoUsuario');
    if (!modal) {
        console.error('‚ùå Modal modalNovoUsuario n√£o encontrado!');
        showError('Erro: Modal n√£o encontrado');
        return;
    }
    
    console.log('‚úÖ Modal encontrado, abrindo...');
    modal.classList.remove('hidden');
    
    // Limpar formul√°rio
    const form = document.getElementById('formNovoUsuario');
    if (form) {
        form.reset();
    }
    
    console.log('‚úÖ Modal aberto com sucesso!');
};

// Fun√ß√£o para fechar modal novo usu√°rio
window.fecharModalNovoUsuario = function() {
    console.log('üîÑ fecharModalNovoUsuario chamada!');
    
    const modal = document.getElementById('modalNovoUsuario');
    if (modal) {
        modal.classList.add('hidden');
        console.log('‚úÖ Modal fechado!');
    }
};

// Fun√ß√£o para abrir modal editar usu√°rio
window.editarUsuario = function(userId) {
    console.log('‚úèÔ∏è === EDITANDO USU√ÅRIO ===');
    console.log('üÜî User ID:', userId);
    
    const usuario = usuarios.find(u => u._id === userId);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado.');
        return;
    }
    
    console.log('üë§ Usu√°rio encontrado:', usuario);
    
    // Preencher o modal com os dados
    document.getElementById('editarUsuarioId').value = usuario._id;
    document.getElementById('editarNome').value = usuario.name;
    document.getElementById('editarEmail').value = usuario.email;
    document.getElementById('editarEmpresa').value = usuario.company || '';
    document.getElementById('editarRole').value = usuario.role;
    document.getElementById('editarStatus').value = usuario.active !== false ? 'true' : 'false';
    
    // Abrir modal
    const modal = document.getElementById('modalEditarUsuario');
    modal.classList.remove('hidden');
    
    showInfo(`Editando usu√°rio: ${usuario.name}`);
};

// Fun√ß√£o para fechar modal editar usu√°rio
window.fecharModalEditarUsuario = function() {
    const modal = document.getElementById('modalEditarUsuario');
    modal.classList.add('hidden');
};

//===============================
// FUN√á√ïES DE CRUD
//===============================

// Fun√ß√£o para criar usu√°rio
window.criarUsuario = async function(event) {
    console.log('üìù criarUsuario chamada!');
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const dadosUsuario = {
        name: formData.get('name'),
        email: formData.get('email'),
        password: formData.get('password'),
        company: formData.get('company') || '',
        role: formData.get('role') || 'user'
    };
    
    console.log('üìä Dados do usu√°rio:', dadosUsuario);
    
    // Valida√ß√£o simples
    if (!dadosUsuario.name || !dadosUsuario.email || !dadosUsuario.password) {
        showError('Por favor, preencha todos os campos obrigat√≥rios');
        return;
    }
    
    try {
        console.log('üì° Enviando para API...');
        
        const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(dadosUsuario)
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            const resultado = await response.json();
            console.log('‚úÖ Usu√°rio criado:', resultado);
            
            showSuccess('Usu√°rio criado com sucesso!');
            window.fecharModalNovoUsuario();
            
            // Recarregar lista
            await window.carregarUsuarios();
            
        } else {
            const erro = await response.json();
            console.error('‚ùå Erro da API:', erro);
            showError(`Erro: ${erro.message || 'Erro ao criar usu√°rio'}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro de rede:', error);
        showError('Erro de conex√£o. Verifique sua internet.');
    }
};

// Fun√ß√£o para salvar edi√ß√£o do usu√°rio
window.salvarEdicaoUsuario = async function(event) {
    event.preventDefault();
    
    const userId = document.getElementById('editarUsuarioId').value;
    const dadosAtualizacao = {
        name: document.getElementById('editarNome').value,
        email: document.getElementById('editarEmail').value,
        company: document.getElementById('editarEmpresa').value,
        role: document.getElementById('editarRole').value,
        active: document.getElementById('editarStatus').value === 'true'
    };
    
    // S√≥ incluir senha se foi preenchida
    const novaSenha = document.getElementById('editarSenha').value;
    if (novaSenha.trim()) {
        dadosAtualizacao.password = novaSenha;
    }
    
    console.log('üíæ Salvando usu√°rio:', userId, dadosAtualizacao);
    
    try {
        const response = await fetch(`/api/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(dadosAtualizacao)
        });
        
        if (response.ok) {
            const resultado = await response.json();
            console.log('‚úÖ Usu√°rio atualizado:', resultado);
            
            showSuccess(`Usu√°rio "${dadosAtualizacao.name}" atualizado com sucesso!`);
            window.fecharModalEditarUsuario();
            await window.carregarUsuarios();
            
        } else {
            const erro = await response.json();
            console.error('‚ùå Erro ao atualizar:', erro);
            showError(`Erro ao atualizar: ${erro.message}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro de rede:', error);
        showError('Erro de conex√£o ao atualizar usu√°rio.');
    }
};

// Fun√ß√£o para deletar usu√°rio
window.deletarUsuario = function(userId) {
    console.log('üóëÔ∏è === DELETANDO USU√ÅRIO ===');
    console.log('üÜî User ID:', userId);
    
    const usuario = usuarios.find(u => u._id === userId);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado.');
        return;
    }
    
    // Confirma√ß√£o personalizada usando alertas do sistema
    const confirmar = confirm(`‚ö†Ô∏è ATEN√á√ÉO!\n\nDeseja realmente EXCLUIR o usu√°rio "${usuario.name}"?\n\nüìß Email: ${usuario.email}\nüë§ Role: ${usuario.role}\n\n‚ö†Ô∏è Esta a√ß√£o N√ÉO pode ser desfeita!\n\nClique OK para confirmar a exclus√£o.`);
    
    if (!confirmar) {
        showInfo('Exclus√£o cancelada pelo usu√°rio.');
        return;
    }
    
    // Prosseguir com a exclus√£o
    window.confirmarDelecaoUsuario(userId);
};

// Fun√ß√£o para confirmar dele√ß√£o
window.confirmarDelecaoUsuario = async function(userId) {
    try {
        console.log('üî• Executando dele√ß√£o do usu√°rio:', userId);
        
        const response = await fetch(`/api/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (response.ok) {
            const resultado = await response.json();
            console.log('‚úÖ Usu√°rio deletado:', resultado);
            
            showSuccess('Usu√°rio exclu√≠do com sucesso!');
            await window.carregarUsuarios();
            
        } else {
            const erro = await response.json();
            console.error('‚ùå Erro ao deletar:', erro);
            showError(`Erro ao excluir: ${erro.message}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro de rede:', error);
        showError('Erro de conex√£o ao excluir usu√°rio.');
    }
};

// Fun√ß√£o para toggle status do usu√°rio
window.toggleUsuario = async function(userId) {
    console.log('üîÑ === TOGGLE USU√ÅRIO ===');
    console.log('üÜî User ID:', userId);
    
    const usuario = usuarios.find(u => u._id === userId);
    if (!usuario) {
        showError('Usu√°rio n√£o encontrado.');
        return;
    }
    
    const novoStatus = !usuario.active;
    const acao = novoStatus ? 'ativar' : 'desativar';
    
    console.log(`üîÑ ${acao} usu√°rio:`, usuario.name);
    console.log('üìä Status atual:', usuario.active);
    console.log('üìä Novo status:', novoStatus);
    console.log('üì¶ Enviando body:', { active: novoStatus });
    
    try {
        const response = await fetch(`/api/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ active: novoStatus })
        });
        
        console.log('üìà Status da resposta:', response.status);
        
        if (response.ok) {
            const resultado = await response.json();
            console.log(`‚úÖ Usu√°rio ${acao}do com sucesso:`, resultado);
            showSuccess(`Usu√°rio "${usuario.name}" ${acao}do com sucesso!`);
            await window.carregarUsuarios();
            
        } else {
            const erro = await response.text();
            console.error(`‚ùå Erro ao ${acao} (text):`, erro);
            
            try {
                const erroJson = JSON.parse(erro);
                showError(`Erro ao ${acao} usu√°rio: ${erroJson.message}`);
            } catch {
                showError(`Erro ao ${acao} usu√°rio: ${response.status} - ${erro}`);
            }
        }
        
    } catch (error) {
        console.error(`‚ùå Erro de rede ao ${acao}:`, error);
        showError(`Erro de conex√£o ao ${acao} usu√°rio.`);
    }
};

//===============================
// LOGOUT COM ALERTAS PADRONIZADOS
//===============================

// Fun√ß√£o de logout padronizada
window.logout = function() {
    console.log('üö™ === LOGOUT SOLICITADO ===');
    
    // Usar o sistema de alertas padronizado em vez de confirm()
    const confirmar = confirm('üö™ Deseja realmente sair do sistema?\n\nVoc√™ precisar√° fazer login novamente para acessar o sistema.');
    
    if (confirmar) {
        console.log('‚úÖ Logout confirmado');
        
        // Limpar dados de autentica√ß√£o
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        localStorage.removeItem('currentInputs');
        localStorage.removeItem('scenarios');
        
        showInfo('Logout realizado com sucesso. Redirecionando...');
        
        // Redirecionar ap√≥s 1 segundo
        setTimeout(() => {
            window.location.href = '/login.html';
        }, 1000);
        
    } else {
        console.log('‚ùå Logout cancelado');
        showInfo('Logout cancelado.');
    }
};

//===============================
// FUN√á√ïES DE CARREGAMENTO
//===============================

// Fun√ß√£o para carregar usu√°rios
window.carregarUsuarios = async function() {
    console.log('üìã carregarUsuarios chamada!');
    
    try {
        console.log('üì° Buscando usu√°rios da API...');
        
        const response = await fetch('/api/users', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        console.log('üìà Resposta da API:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            usuarios = data.users || [];
            console.log('‚úÖ Usu√°rios carregados:', usuarios.length);
            
            window.renderizarUsuarios();
            window.atualizarEstatisticas();
            
        } else {
            const erro = await response.text();
            console.error('‚ùå Erro da API:', erro);
            showError('Erro ao carregar usu√°rios');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar usu√°rios:', error);
        showError('Erro de conex√£o ao carregar usu√°rios');
    }
};

// Fun√ß√£o para renderizar usu√°rios na tabela
window.renderizarUsuarios = function() {
    console.log('üé® Renderizando usu√°rios...');
    
    const tbody = document.getElementById('tabelaUsuarios');
    if (!tbody) {
        console.error('‚ùå Tabela de usu√°rios n√£o encontrada!');
        return;
    }
    
    if (usuarios.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center text-gray-500 p-8">
                    <i class="fas fa-users text-4xl mb-4"></i>
                    <p>Nenhum usu√°rio encontrado</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = usuarios.map(usuario => {
        const status = usuario.active !== false ? 
            '<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">‚úÖ Ativo</span>' : 
            '<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">‚ùå Inativo</span>';
            
        const role = usuario.role === 'admin' ? 
            '<span class="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">üëë Admin</span>' :
            '<span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">üë§ Usu√°rio</span>';
            
        const ultimoLogin = usuario.lastLogin ? 
            new Date(usuario.lastLogin).toLocaleDateString('pt-BR') : 
            'Nunca';
            
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-teal-100 rounded-full flex items-center justify-center mr-3">
                            <span class="text-teal-600 font-semibold">
                                ${usuario.name.charAt(0).toUpperCase()}
                            </span>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">${usuario.name}</div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">${usuario.email}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${usuario.company || '-'}</td>
                <td class="px-6 py-4">${role}</td>
                <td class="px-6 py-4">${status}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${ultimoLogin}</td>
                <td class="px-6 py-4 text-sm font-medium">
                    <div class="flex space-x-2">
                        <button onclick="editarUsuario('${usuario._id}')" class="text-blue-600 hover:text-blue-900 px-2 py-1 rounded">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button onclick="toggleUsuario('${usuario._id}')" class="text-yellow-600 hover:text-yellow-900 px-2 py-1 rounded">
                            <i class="fas fa-toggle-${usuario.active !== false ? 'on' : 'off'}"></i> ${usuario.active !== false ? 'Desativar' : 'Ativar'}
                        </button>
                        <button onclick="deletarUsuario('${usuario._id}')" class="text-red-600 hover:text-red-900 px-2 py-1 rounded">
                            <i class="fas fa-trash"></i> Excluir
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    console.log('‚úÖ Usu√°rios renderizados!');
};

// Fun√ß√£o para atualizar estat√≠sticas
window.atualizarEstatisticas = function() {
    console.log('üìä Atualizando estat√≠sticas...');
    
    const total = usuarios.length;
    const ativos = usuarios.filter(u => u.active !== false).length;
    const admins = usuarios.filter(u => u.role === 'admin').length;
    
    document.getElementById('totalUsuarios').textContent = total;
    document.getElementById('usuariosAtivos').textContent = ativos;
    document.getElementById('novosUsuarios').textContent = admins;
    
    console.log('‚úÖ Estat√≠sticas atualizadas:', { total, ativos, admins });
};

//===============================
// INICIALIZA√á√ÉO
//===============================

// Inicializar quando DOM carregar
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ DOM carregado, inicializando usu√°rios...');
    console.log('üîç Verificando depend√™ncias...');
    
    // Verificar se as fun√ß√µes de alerta est√£o dispon√≠veis
    if (typeof showSuccess === 'undefined') {
        console.error('‚ùå showSuccess n√£o definida - alerts.js n√£o carregado!');
        window.showSuccess = (msg) => alert('‚úÖ ' + msg);
        window.showError = (msg) => alert('‚ùå ' + msg);
        window.showInfo = (msg) => alert('‚ÑπÔ∏è ' + msg);
    } else {
        console.log('‚úÖ Sistema de alertas carregado');
    }
    
    try {
        // Configurar bot√£o novo usu√°rio
        const btnNovoUsuario = document.getElementById('btnNovoUsuario');
        if (btnNovoUsuario) {
            // Remover event listeners antigos
            btnNovoUsuario.removeEventListener('click', window.abrirModalNovoUsuario);
            btnNovoUsuario.addEventListener('click', window.abrirModalNovoUsuario);
            console.log('‚úÖ Bot√£o novo usu√°rio configurado!');
        } else {
            console.error('‚ùå Bot√£o btnNovoUsuario n√£o encontrado!');
        }
        
        // Configurar form novo usu√°rio
        const form = document.getElementById('formNovoUsuario');
        if (form) {
            form.removeEventListener('submit', window.criarUsuario);
            form.addEventListener('submit', window.criarUsuario);
            console.log('‚úÖ Form novo usu√°rio configurado!');
        } else {
            console.error('‚ùå Form formNovoUsuario n√£o encontrado!');
        }
        
        // Configurar form editar usu√°rio
        const formEditar = document.getElementById('formEditarUsuario');
        if (formEditar) {
            formEditar.removeEventListener('submit', window.salvarEdicaoUsuario);
            formEditar.addEventListener('submit', window.salvarEdicaoUsuario);
            console.log('‚úÖ Form editar usu√°rio configurado!');
        } else {
            console.error('‚ùå Form formEditarUsuario n√£o encontrado!');
        }
        
        // Verificar token de autentica√ß√£o
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('‚ùå Token n√£o encontrado - redirecionando para login');
            showError('Voc√™ precisa fazer login primeiro!');
            setTimeout(() => {
                window.location.href = '/login.html';
            }, 2000);
            return;
        }
        
        console.log('üîë Token encontrado:', token.substring(0, 20) + '...');
        
        // Carregar usu√°rios
        console.log('üìã Carregando usu√°rios...');
        await window.carregarUsuarios();
        
        console.log('üéâ Inicializa√ß√£o completa!');
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        showError('Erro ao inicializar a p√°gina: ' + error.message);
    }
});

console.log('‚úÖ usuarios.js carregado - Fun√ß√µes definidas globalmente!');
